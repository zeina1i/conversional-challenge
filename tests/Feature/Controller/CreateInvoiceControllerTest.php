<?php
namespace App\Tests\Feature\Controller;

use App\Service\CustomerService;
use App\Service\InvoiceService;
use App\Service\UserService;
use App\Tests\FixtureAwareTestCase;
use Symfony\Component\HttpFoundation\Response;

class CreateInvoiceControllerTest extends FixtureAwareTestCase
{
    /** @var CustomerService $customerService */
    private $customerService;
    /** @var InvoiceService $invoiceService */
    private $invoiceService;
    /** @var UserService $userService */
    private $userService;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->customerService = $this->getContainer()->get(CustomerService::class);
        $this->invoiceService = $this->getContainer()->get(InvoiceService::class);
        $this->userService = $this->getContainer()->get(UserService::class);
    }

    public function testCreateInvoiceHappyPath()
    {
        $customer = $this->customerService->findCustomerByEmail('customer1@gmail.com');

        $this->client->jsonRequest('POST', "/customer/{$customer->getId()}/invoice", [
            'start_date' => '2023-01-01',
            'end_date' => '2023-02-01'
        ]);

        $response = json_decode($this->client->getResponse()->getContent(), true);


        $this->assertResponseStatusCodeSame(Response::HTTP_OK);
        $this->assertArrayHasKey('status', $response);
        $this->assertArrayHasKey('data', $response);
        $this->assertArrayHasKey('id', $response['data']);
    }

    public function testCreateInvoiceWhenTimeIntersects()
    {
        $customer = $this->customerService->findCustomerByEmail('customer1@gmail.com');

        $this->client->jsonRequest('POST', "/customer/{$customer->getId()}/invoice", [
            'start_date' => '2021-01-01',
            'end_date' => '2021-02-01'
        ]);

        $response = json_decode($this->client->getResponse()->getContent(), true);


        $this->assertResponseStatusCodeSame(Response::HTTP_BAD_REQUEST);
        $this->assertArrayHasKey('status', $response);
        $this->assertArrayHasKey('message', $response);
        $this->assertEquals('another invoice date conflicted with the applied invoice date', $response['message']);
    }

    public function testCreateInvoiceWhenCustomerIsNotFound()
    {
        $this->client->jsonRequest('POST', "/customer/434354/invoice", [
            'start_date' => '2021-01-01',
            'end_date' => '2021-02-01'
        ]);

        $response = json_decode($this->client->getResponse()->getContent(), true);

        $this->assertResponseStatusCodeSame(Response::HTTP_NOT_FOUND);
        $this->assertArrayHasKey('status', $response);
        $this->assertArrayHasKey('message', $response);
        $this->assertEquals('customer with id 434354 not found', $response['message']);
    }

    public function testCreateInvoiceWhenInputIsNotValid()
    {
        $this->client->jsonRequest('POST', "/customer/434354/invoice", [
            'end_date' => '2021-02-01'
        ]);

        $response = json_decode($this->client->getResponse()->getContent(), true);

        $this->assertResponseStatusCodeSame(Response::HTTP_BAD_REQUEST);
        $this->assertArrayHasKey('status', $response);
        $this->assertArrayHasKey('message', $response);
    }
}